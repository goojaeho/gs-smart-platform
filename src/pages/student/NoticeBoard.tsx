import Layout from '../../components/common/Layout';
import { useState } from 'react';
import { 
  Bell, Search, Filter, Eye, MessageCircle, Paperclip, 
  Image as ImageIcon, Link, Calendar, User, ChevronDown,
  CheckCircle, Star, AlertCircle
} from 'lucide-react';

interface Notice {
  id: number;
  title: string;
  author: {
    name: string;
    profileImage?: string;
  };
  date: string;
  target: 'all' | 'class' | 'individual';
  targetLabel: string;
  contentPreview: string;
  fullContent: string;
  hasAttachment: boolean;
  hasImage: boolean;
  hasLink: boolean;
  views: number;
  comments: number;
  isNew: boolean;
  isRead: boolean;
  isPinned: boolean;
  isImportant: boolean;
  attachments?: Array<{
    name: string;
    type: string;
    url: string;
  }>;
}

const NoticeBoard = () => {
  const [selectedNotice, setSelectedNotice] = useState<Notice | null>(null);
  const [filter, setFilter] = useState<'all' | 'unread' | 'important'>('all');
  const [searchTerm, setSearchTerm] = useState('');

  const notices: Notice[] = [
    {
      id: 1,
      title: '2025ÎÖÑ 1ÌïôÍ∏∞ ÏãúÍ∞ÑÌëú ÏïàÎÇ¥',
      author: {
        name: 'ÍπÄÎã¥ÏûÑ ÏÑ†ÏÉùÎãò',
        profileImage: 'üë©‚Äçüè´'
      },
      date: '2025-01-24',
      target: 'all',
      targetLabel: 'Ï†ÑÏ≤¥ ÌïôÏÉù',
      contentPreview: 'ÏÉà ÌïôÍ∏∞Î•º ÎßûÏïÑ Î≥ÄÍ≤ΩÎêú ÏãúÍ∞ÑÌëúÎ•º ÏïàÎÇ¥ÎìúÎ¶ΩÎãàÎã§. ÏàòÌïô ÏàòÏóÖÏù¥ ÌôîÏöîÏùºÎ°ú Ïù¥ÎèôÎêòÏóàÏúºÎãà...',
      fullContent: `ÏÉà ÌïôÍ∏∞Î•º ÎßûÏïÑ Î≥ÄÍ≤ΩÎêú ÏãúÍ∞ÑÌëúÎ•º ÏïàÎÇ¥ÎìúÎ¶ΩÎãàÎã§.

Ï£ºÏöî Î≥ÄÍ≤ΩÏÇ¨Ìï≠:
‚Ä¢ ÏàòÌïô ÏàòÏóÖ: ÏõîÏöîÏùº ‚Üí ÌôîÏöîÏùº 3ÍµêÏãú
‚Ä¢ Í≥ºÌïô ÏàòÏóÖ: ÌôîÏöîÏùº ‚Üí ÏàòÏöîÏùº 2ÍµêÏãú
‚Ä¢ Ï≤¥Ïú° ÏàòÏóÖ: Î™©ÏöîÏùº ‚Üí Í∏àÏöîÏùº 5ÍµêÏãú

ÏûêÏÑ∏Ìïú ÏãúÍ∞ÑÌëúÎäî Ï≤®Î∂ÄÌååÏùºÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.`,
      hasAttachment: true,
      hasImage: false,
      hasLink: false,
      views: 156,
      comments: 8,
      isNew: true,
      isRead: false,
      isPinned: true,
      isImportant: true,
      attachments: [
        { name: '2025ÎÖÑ_1ÌïôÍ∏∞_ÏãúÍ∞ÑÌëú.pdf', type: 'pdf', url: '#' }
      ]
    },
    {
      id: 2,
      title: 'Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ ÏïàÎÇ¥ - Í≥ºÌïôÍ¥Ä Í≤¨Ìïô',
      author: {
        name: 'Î∞ïÍ≥ºÌïô ÏÑ†ÏÉùÎãò',
        profileImage: 'üë®‚Äçüî¨'
      },
      date: '2025-01-23',
      target: 'class',
      targetLabel: '5ÌïôÎÖÑ 1Î∞ò',
      contentPreview: 'Îã§Ïùå Ï£º Í∏àÏöîÏùº Í≥ºÌïôÍ¥Ä Í≤¨ÌïôÏùÑ ÏúÑÌïú Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑúÎ•º Ï†úÏ∂úÌï¥Ï£ºÏÑ∏Ïöî...',
      fullContent: `Îã§Ïùå Ï£º Í∏àÏöîÏùº Í≥ºÌïôÍ¥Ä Í≤¨ÌïôÏùÑ ÏúÑÌïú Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑúÎ•º Ï†úÏ∂úÌï¥Ï£ºÏÑ∏Ïöî.

ÏùºÏ†ï: 2025ÎÖÑ 1Ïõî 31Ïùº (Í∏à) Ïò§Ï†Ñ 9Ïãú ~ Ïò§ÌõÑ 3Ïãú
Ïû•ÏÜå: Íµ≠Î¶ΩÏ§ëÏïôÍ≥ºÌïôÍ¥Ä
Ï§ÄÎπÑÎ¨º: ÎèÑÏãúÎùΩ, Î¨ºÎ≥ë, ÌïÑÍ∏∞Íµ¨, Ïπ¥Î©îÎùº(ÏÑ†ÌÉù)

Ïã†Ï≤≠ÏÑúÎäî Îã§Ïùå ÎßÅÌÅ¨ÏóêÏÑú Îã§Ïö¥Î°úÎìúÌïòÏÑ∏Ïöî: https://example.com/form`,
      hasAttachment: false,
      hasImage: true,
      hasLink: true,
      views: 89,
      comments: 12,
      isNew: false,
      isRead: true,
      isPinned: false,
      isImportant: false
    },
    {
      id: 3,
      title: 'ÎèÖÏÑúÍ∞êÏÉÅÎ¨∏ ÎåÄÌöå Ï∞∏Í∞Ä ÏïàÎÇ¥',
      author: {
        name: 'Ïù¥Íµ≠Ïñ¥ ÏÑ†ÏÉùÎãò',
        profileImage: 'üë®‚Äçüè´'
      },
      date: '2025-01-22',
      target: 'all',
      targetLabel: 'Ï†ÑÏ≤¥ ÌïôÏÉù',
      contentPreview: 'Ï†ú15Ìöå ÎèÖÏÑúÍ∞êÏÉÅÎ¨∏ ÎåÄÌöåÍ∞Ä Í∞úÏµúÎê©ÎãàÎã§. ÎßéÏùÄ Ï∞∏Ïó¨ Î∞îÎûçÎãàÎã§...',
      fullContent: `Ï†ú15Ìöå ÎèÖÏÑúÍ∞êÏÉÅÎ¨∏ ÎåÄÌöåÍ∞Ä Í∞úÏµúÎê©ÎãàÎã§.

ÎåÄÌöå ÏùºÏ†ï:
‚Ä¢ Ï†ëÏàò Í∏∞Í∞Ñ: 2025ÎÖÑ 2Ïõî 1Ïùº ~ 2Ïõî 15Ïùº
‚Ä¢ Ïã¨ÏÇ¨ Í∏∞Í∞Ñ: 2Ïõî 16Ïùº ~ 2Ïõî 28Ïùº
‚Ä¢ ÏãúÏÉÅÏãù: 3Ïõî 5Ïùº

ÏÉÅÍ∏à:
‚Ä¢ ÎåÄÏÉÅ: 10ÎßåÏõê ÏÉÅÌíàÍ∂å + ÏÉÅÏû•
‚Ä¢ Ïö∞ÏàòÏÉÅ: 5ÎßåÏõê ÏÉÅÌíàÍ∂å + ÏÉÅÏû•
‚Ä¢ Ï∞∏Í∞ÄÏÉÅ: ÎèÑÏÑú 3Í∂å`,
      hasAttachment: true,
      hasImage: false,
      hasLink: false,
      views: 234,
      comments: 5,
      isNew: false,
      isRead: false,
      isPinned: false,
      isImportant: true,
      attachments: [
        { name: 'ÎèÖÏÑúÍ∞êÏÉÅÎ¨∏_ÎåÄÌöå_ÏïàÎÇ¥Î¨∏.docx', type: 'doc', url: '#' }
      ]
    },
    {
      id: 4,
      title: 'Í∞úÏù∏Î≥Ñ ÌïôÏäµ ÏßÑÎã® Í≤∞Í≥º ÏïàÎÇ¥',
      author: {
        name: 'AI ÌïôÏäµÎ∂ÑÏÑù ÏãúÏä§ÌÖú',
        profileImage: 'ü§ñ'
      },
      date: '2025-01-21',
      target: 'individual',
      targetLabel: 'ÍπÄÌïôÏÉù',
      contentPreview: 'AI Î∂ÑÏÑù Í≤∞Í≥º ÏàòÌïô Î∂ÑÏàò Îã®ÏõêÏóêÏÑú Î≥¥Ï∂© ÌïôÏäµÏù¥ ÌïÑÏöîÌï©ÎãàÎã§...',
      fullContent: `AI Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î∞îÌÉïÏúºÎ°ú Í∞úÏù∏Î≥Ñ ÌïôÏäµ ÏßÑÎã® Í≤∞Í≥ºÎ•º ÏïàÎÇ¥ÎìúÎ¶ΩÎãàÎã§.

Í∞ïÏ†ê ÏòÅÏó≠:
‚Ä¢ ÏòÅÏñ¥ ÎèÖÌï¥: 92Ï†ê (ÏÉÅÏúÑ 5%)
‚Ä¢ Í≥ºÌïô Ïã§Ìóò: 88Ï†ê (ÏÉÅÏúÑ 15%)

Î≥¥Ï∂© ÌïÑÏöî ÏòÅÏó≠:
‚Ä¢ ÏàòÌïô Î∂ÑÏàò: 67Ï†ê (Î≥¥Ï∂© Í∂åÏû•)
‚Ä¢ Íµ≠Ïñ¥ Î¨∏Î≤ï: 73Ï†ê (Î≥¥Ï∂© Í∂åÏû•)

Ï∂îÏ≤ú ÌïôÏäµ ÏΩòÌÖêÏ∏†Í∞Ä Í∞úÎ≥Ñ Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.`,
      hasAttachment: false,
      hasImage: false,
      hasLink: true,
      views: 45,
      comments: 2,
      isNew: true,
      isRead: false,
      isPinned: false,
      isImportant: false
    },
    {
      id: 5,
      title: 'ÌïôÎ∂ÄÎ™® ÏÉÅÎã¥ Ï£ºÍ∞Ñ ÏïàÎÇ¥',
      author: {
        name: 'ÍµêÎ¨¥Î∂Ä',
        profileImage: 'üè´'
      },
      date: '2025-01-20',
      target: 'all',
      targetLabel: 'Ï†ÑÏ≤¥ ÌïôÏÉù',
      contentPreview: 'Îã§Ïùå Ï£ºÎäî ÌïôÎ∂ÄÎ™® ÏÉÅÎã¥ Ï£ºÍ∞ÑÏûÖÎãàÎã§. ÌïôÎ∂ÄÎ™®ÎãòÍªòÏÑú Îã¥ÏûÑ ÏÑ†ÏÉùÎãòÍ≥º...',
      fullContent: `Îã§Ïùå Ï£ºÎäî ÌïôÎ∂ÄÎ™® ÏÉÅÎã¥ Ï£ºÍ∞ÑÏûÖÎãàÎã§.

ÏÉÅÎã¥ ÏùºÏ†ï: 2025ÎÖÑ 1Ïõî 27Ïùº ~ 31Ïùº
ÏÉÅÎã¥ ÏãúÍ∞Ñ: Ïò§ÌõÑ 2Ïãú ~ 5Ïãú
ÏÉÅÎã¥ Î∞©Î≤ï: ÎåÄÎ©¥ ÎòêÎäî ÌôîÏÉÅÏÉÅÎã¥ ÏÑ†ÌÉù Í∞ÄÎä•

ÏÉÅÎã¥ Ïã†Ï≤≠ÏùÄ ÌïôÍµê ÌôàÌéòÏù¥ÏßÄÏóêÏÑú Í∞ÄÎä•Ìï©ÎãàÎã§.
Î¨∏ÏùòÏÇ¨Ìï≠Ïù¥ ÏûàÏúºÏãúÎ©¥ ÍµêÎ¨¥Ïã§Î°ú Ïó∞ÎùΩÏ£ºÏÑ∏Ïöî.

Ïó∞ÎùΩÏ≤ò: 02-1234-5678`,
      hasAttachment: false,
      hasImage: false,
      hasLink: true,
      views: 178,
      comments: 15,
      isNew: false,
      isRead: true,
      isPinned: false,
      isImportant: false
    }
  ];

  const filteredNotices = notices.filter(notice => {
    const matchesFilter = 
      filter === 'all' || 
      (filter === 'unread' && !notice.isRead) || 
      (filter === 'important' && notice.isImportant);
    
    const matchesSearch = 
      searchTerm === '' ||
      notice.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      notice.author.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      notice.contentPreview.toLowerCase().includes(searchTerm.toLowerCase());

    return matchesFilter && matchesSearch;
  });

  const handleNoticeClick = (notice: Notice) => {
    setSelectedNotice(notice);
    // Mark as read
    notice.isRead = true;
    notice.views += 1;
  };

  const handleMarkAsRead = (noticeId: number) => {
    const notice = notices.find(n => n.id === noticeId);
    if (notice) {
      notice.isRead = true;
    }
  };

  const getTargetBadgeColor = (target: string) => {
    switch (target) {
      case 'all': return 'bg-blue-100 text-blue-700';
      case 'class': return 'bg-green-100 text-green-700';
      case 'individual': return 'bg-purple-100 text-purple-700';
      default: return 'bg-gray-100 text-gray-700';
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const options: Intl.DateTimeFormatOptions = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      weekday: 'long' 
    };
    return date.toLocaleDateString('ko-KR', options);
  };

  if (selectedNotice) {
    return (
      <Layout>
        <div className="max-w-4xl mx-auto px-4 sm:px-6">
          {/* Back button */}
          <button 
            onClick={() => setSelectedNotice(null)}
            className="mb-4 sm:mb-6 flex items-center text-blue-600 hover:text-blue-800 text-sm sm:text-base"
          >
            ‚Üê Î™©Î°ùÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
          </button>

          {/* Notice Detail */}
          <div className="bg-white rounded-lg shadow-lg overflow-hidden">
            {/* Header */}
            <div className="p-4 sm:p-6 border-b border-gray-200">
              <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 mb-4">
                <div className="flex-1">
                  <h1 className="text-xl sm:text-2xl font-bold text-gray-900 mb-3">
                    {selectedNotice.title}
                  </h1>
                  
                  <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-4 gap-2 text-xs sm:text-sm text-gray-600">
                    <div className="flex items-center space-x-2">
                      <div className="w-6 sm:w-8 h-6 sm:h-8 bg-blue-100 rounded-full flex items-center justify-center text-sm sm:text-lg">
                        {selectedNotice.author.profileImage}
                      </div>
                      <span className="font-medium">{selectedNotice.author.name}</span>
                    </div>
                    
                    <div className="flex items-center space-x-1">
                      <Calendar className="w-3 sm:w-4 h-3 sm:h-4" />
                      <span>{formatDate(selectedNotice.date)}</span>
                    </div>
                    
                    <span className={`px-2 py-1 rounded-full text-[10px] sm:text-xs ${getTargetBadgeColor(selectedNotice.target)}`}>
                      {selectedNotice.targetLabel}
                    </span>
                  </div>
                </div>

                <div className="flex items-center space-x-3 sm:space-x-4 text-xs sm:text-sm text-gray-500">
                  <div className="flex items-center space-x-1">
                    <Eye className="w-3 sm:w-4 h-3 sm:h-4" />
                    <span>{selectedNotice.views}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <MessageCircle className="w-3 sm:w-4 h-3 sm:h-4" />
                    <span>{selectedNotice.comments}</span>
                  </div>
                </div>
              </div>

              {/* Status indicators */}
              <div className="flex items-center space-x-2">
                {selectedNotice.isPinned && (
                  <span className="flex items-center space-x-1 px-2 py-1 bg-yellow-100 text-yellow-700 rounded-full text-xs">
                    <Star className="w-3 h-3" />
                    <span>Í≥†Ï†ï</span>
                  </span>
                )}
                {selectedNotice.isImportant && (
                  <span className="flex items-center space-x-1 px-2 py-1 bg-red-100 text-red-700 rounded-full text-xs">
                    <AlertCircle className="w-3 h-3" />
                    <span>Ï§ëÏöî</span>
                  </span>
                )}
                {selectedNotice.isNew && (
                  <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium">
                    NEW
                  </span>
                )}
              </div>
            </div>

            {/* Content */}
            <div className="p-4 sm:p-6">
              <div className="prose max-w-none">
                {selectedNotice.fullContent.split('\n').map((paragraph, index) => (
                  <p key={index} className="mb-4 text-sm sm:text-base text-gray-700 leading-relaxed">
                    {paragraph}
                  </p>
                ))}
              </div>

              {/* Attachments */}
              {selectedNotice.attachments && selectedNotice.attachments.length > 0 && (
                <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                  <h3 className="text-sm font-medium text-gray-900 mb-3">Ï≤®Î∂ÄÌååÏùº</h3>
                  <div className="space-y-2">
                    {selectedNotice.attachments.map((attachment, index) => (
                      <a
                        key={index}
                        href={attachment.url}
                        className="flex items-center space-x-2 text-blue-600 hover:text-blue-800"
                      >
                        <Paperclip className="w-4 h-4" />
                        <span>{attachment.name}</span>
                      </a>
                    ))}
                  </div>
                </div>
              )}

              {/* Confirm button */}
              <div className="mt-6 flex justify-center">
                <button
                  onClick={() => handleMarkAsRead(selectedNotice.id)}
                  className="flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  disabled={selectedNotice.isRead}
                >
                  <CheckCircle className="w-5 h-5" />
                  <span>{selectedNotice.isRead ? 'ÏùΩÏùå ÌôïÏù∏Îê®' : 'ÏùΩÏùå ÌôïÏù∏'}</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
          <div>
            <h2 className="text-2xl sm:text-3xl font-bold text-gray-900">ÏïåÎ¶ºÏû•</h2>
            <p className="text-sm sm:text-base text-gray-600 mt-1">ÏÑ†ÏÉùÎãòÏù¥ Î≥¥ÎÇ¥Ï£ºÏã† Í≥µÏßÄÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî</p>
          </div>
          
          <div className="flex items-center space-x-3 sm:space-x-4">
            <div className="text-center">
              <p className="text-xs sm:text-sm text-gray-500">ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º</p>
              <p className="text-xl sm:text-2xl font-bold text-red-600">
                {notices.filter(n => !n.isRead).length}
              </p>
            </div>
            <div className="text-center">
              <p className="text-xs sm:text-sm text-gray-500">Ï†ÑÏ≤¥ ÏïåÎ¶º</p>
              <p className="text-xl sm:text-2xl font-bold text-blue-600">{notices.length}</p>
            </div>
          </div>
        </div>

        {/* Search and Filter */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:space-x-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 sm:w-5 h-4 sm:h-5 text-gray-400" />
            <input
              type="text"
              placeholder="Ï†úÎ™©, ÎÇ¥Ïö©, ÏÑ†ÏÉùÎãò Ïù¥Î¶ÑÏúºÎ°ú Í≤ÄÏÉâ..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 sm:py-3 text-sm sm:text-base border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          
          <div className="flex space-x-2">
            <button
              onClick={() => setFilter('all')}
              className={`px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg font-medium transition-colors text-sm sm:text-base ${
                filter === 'all'
                  ? 'bg-blue-500 text-white'
                  : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'
              }`}
            >
              Ï†ÑÏ≤¥
            </button>
            <button
              onClick={() => setFilter('unread')}
              className={`px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg font-medium transition-colors text-sm sm:text-base ${
                filter === 'unread'
                  ? 'bg-blue-500 text-white'
                  : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'
              }`}
            >
              ÏùΩÏßÄ ÏïäÏùå
            </button>
            <button
              onClick={() => setFilter('important')}
              className={`px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg font-medium transition-colors text-sm sm:text-base ${
                filter === 'important'
                  ? 'bg-blue-500 text-white'
                  : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'
              }`}
            >
              Ï§ëÏöî
            </button>
          </div>
        </div>

        {/* Notice Cards */}
        <div className="grid grid-cols-1 gap-4">
          {filteredNotices.map((notice) => (
            <div
              key={notice.id}
              onClick={() => handleNoticeClick(notice)}
              className={`bg-white rounded-lg shadow-md hover:shadow-lg transition-all cursor-pointer p-4 sm:p-6 border-l-4 ${
                notice.isPinned 
                  ? 'border-l-yellow-500 bg-yellow-50' 
                  : notice.isImportant 
                  ? 'border-l-red-500' 
                  : notice.isNew 
                  ? 'border-l-blue-500' 
                  : 'border-l-gray-300'
              } ${!notice.isRead ? 'ring-2 ring-blue-200' : ''}`}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  {/* Title and badges */}
                  <div className="flex items-start space-x-2 sm:space-x-3 mb-2 sm:mb-3">
                    <h3 className={`text-base sm:text-lg font-bold ${!notice.isRead ? 'text-gray-900' : 'text-gray-700'} flex-1`}>
                      {notice.title}
                    </h3>
                    
                    <div className="flex items-center space-x-1">
                      {notice.isPinned && <Star className="w-4 h-4 text-yellow-500" />}
                      {notice.isImportant && <AlertCircle className="w-4 h-4 text-red-500" />}
                      {notice.isNew && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs font-medium">
                          NEW
                        </span>
                      )}
                      {!notice.isRead && (
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      )}
                    </div>
                  </div>

                  {/* Author and meta info */}
                  <div className="flex flex-wrap items-center gap-2 sm:gap-4 mb-2 sm:mb-3 text-xs sm:text-sm text-gray-600">
                    <div className="flex items-center space-x-1 sm:space-x-2">
                      <div className="w-5 sm:w-6 h-5 sm:h-6 bg-blue-100 rounded-full flex items-center justify-center text-xs sm:text-sm">
                        {notice.author.profileImage}
                      </div>
                      <span className="font-medium">{notice.author.name}</span>
                    </div>
                    
                    <span className="hidden sm:inline">{formatDate(notice.date)}</span>
                    <span className="sm:hidden">{notice.date}</span>
                    
                    <span className={`px-2 py-0.5 sm:py-1 rounded-full text-[10px] sm:text-xs ${getTargetBadgeColor(notice.target)}`}>
                      {notice.targetLabel}
                    </span>
                  </div>

                  {/* Content preview */}
                  <p className="text-xs sm:text-sm text-gray-600 mb-2 sm:mb-3 line-clamp-2">
                    {notice.contentPreview}
                  </p>

                  {/* Icons and stats */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2 sm:space-x-4 text-xs sm:text-sm text-gray-500">
                      <div className="flex items-center space-x-1">
                        <Eye className="w-3 sm:w-4 h-3 sm:h-4" />
                        <span>{notice.views}</span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <MessageCircle className="w-3 sm:w-4 h-3 sm:h-4" />
                        <span>{notice.comments}</span>
                      </div>
                      
                      {/* Attachment indicators */}
                      <div className="flex items-center space-x-1 sm:space-x-2">
                        {notice.hasAttachment && <Paperclip className="w-3 sm:w-4 h-3 sm:h-4 text-gray-400" />}
                        {notice.hasImage && <ImageIcon className="w-3 sm:w-4 h-3 sm:h-4 text-gray-400" />}
                        {notice.hasLink && <Link className="w-3 sm:w-4 h-3 sm:h-4 text-gray-400" />}
                      </div>
                    </div>
                    
                    <div className="text-[10px] sm:text-xs text-gray-400 hidden sm:block">
                      ÌÅ¥Î¶≠ÌïòÏó¨ ÏûêÏÑ∏Ìûà Î≥¥Í∏∞
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Empty state */}
        {filteredNotices.length === 0 && (
          <div className="text-center py-12">
            <Bell className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <p className="text-gray-500 text-lg">
              {filter === 'unread' ? 'ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.' :
               filter === 'important' ? 'Ï§ëÏöîÌïú ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.' :
               searchTerm ? 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.' :
               'ÏïåÎ¶ºÏù¥ ÏóÜÏäµÎãàÎã§.'}
            </p>
          </div>
        )}
      </div>
    </Layout>
  );
};

export default NoticeBoard;